// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    //Check if it's a C-instruction
    //If it'f not, load value to A register. If yes, check if the A register wants to load the result of ALU's calculation or not.
    Mux16(a=instruction, b=ALUout, sel=instruction[15], out=out1);
    Mux(a=true, b=instruction[5], sel=instruction[15], out=out2);
    ARegister(in=out1, load=out2, out=out3);

    //Address handling
    And16(a=out3, b[0..15]=true, out[0..14]=addressM, out[15]=nop1);

    //Check if it's a C-instruction or not, and value a of "comp" field is 0 or 1
    And(a=instruction[12], b=instruction[15], out=muxcheck);
    Mux16(a=out3, b=inM, sel=muxcheck, out=out4);

    //Check if it's a C-instruction or not, and value d2 of "dest" field is 0 or 1
    And(a=instruction[4], b=instruction[15], out=loadcheck);
    DRegister(in=ALUout, load=loadcheck, out=out5);

    //Do calculation between D register and A/M register
    ALU(x=out5, y=out4, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUout, zr=zf, ng=negf);

    //Check whether the instruction is C-instruction, and the value is saved to memory slot or not
    Mux(a=false, b=instruction[3], sel=instruction[15], out=outMsel);
    Mux16(a[0..15]=false, b=ALUout, sel=outMsel, out=outM);
    And(a=outMsel, b=true, out=writeM);

    //Generate the positive flag, which value is 0 when the ALU result's is <= 0, and 0 when it's > 0.
    Or(a=zf, b=negf, out=out6);
    Not(in=out6, out=posf);

    //Check if it's a C-instruction or not
    //If yes, do the jump. If not, don't do the jump.
    Mux(a=false, b=negf, sel=instruction[2], out=out7);
    Mux(a=false, b=zf, sel=instruction[1], out=out8);
    Mux(a=false, b=posf, sel=instruction[0], out=out9);
    Or(a=out7, b=out8, out=out10);
    Or(a=out10, b=out9, out=out11);
    And(a=out11, b=instruction[15], out=load);

    PC(in=out3, load=load, inc=true, reset=reset, out[0..14]=pc, out[15]=nop2);   
}